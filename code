#This program is used for basic calculations involving finding LCD codes.

import numpy as np

def transpose(X):  #this finds the transpose of a matrix; will be used for G^t
    result= np.zeros((len(X[0]), len(X)))
    for i in range(len(X)):
        for j in range(len(X[0])):
            result[j][i]=X[i][j]
    return result

def leftIdentity(X,l): #given an empty matrix G, will fill in the first kxk elements with the identity
    for i in range(0,l):
        for j in range(0,l):
            if (j==i):
                X[j][i]=1
    return X            
    #should prolly do error check for when k>n
    
def rightIdentity(X, n, k): #given some empty matrix P, it will fill in the last n-k x n-k elements with the identity (for the parity check matrix)
    return 0
    
    
def prod(X,Y, field): #matrix product
    f=len(field)
    xrow=len(X)
    yrow=len(Y)
    ycol=len(Y[0])
    Z=np.zeros((xrow, ycol))
    for i in range(0,xrow):
        for j in range(0, ycol):
            for k in range(0, yrow):
                Z[i][j] += (X[i][k] * Y[k][j]) #% f
            Z[i][j] = Z[i][j] % f
    return(Z)


def det(X, field):  #determinant function specifically over a finite field.  Will behelpful with finding invertible GG^t, thus LCD codes
    D = np.linalg.det(X)
    f= len(field)
    return D % f

def isInvert(X, f): #determines if a given matrix is invertible
    if det(X, f) == 0:
        return False
    else:
        return True
    
def minus(X, field): #creates negative of matrix over a finite field f
    M=np.zeros((len(X), len(X[0])))
    f=len(field)
    for i in range (0, len(X)):
        for j in range(0, len(X[0])):
            if not(X[i][j] == 0):
                M[i][j]= f - X[i][j]
    return M
    

def addAllA(f, l):  #this accumulates all possible codes given a field
    m = len(f)
    addAllARec(f, "", m, l)
    
def addAllARec(f, pref, m,l): #recursive helper to turn permutation into string and then int
    #important side effect: candidates are now filled
    if (l==0):
#        print(pref)
        count=0
        mtrx=leftIdentity(np.zeros((k,n)), k)
        for e in range(k, n):
            for d in range(0, k):
#                print(pref[count])
                mtrx[d][e]=int(pref[count])
                count += 1
#                print(mtrx[d][e])
#                print(mtrx)
        candidates.append(mtrx)
        return

    for i in range(m):
        newpref = pref + str(f[i])
        addAllARec(f, newpref, m, l-1)
        
a=np.array([[1,2,3],[4,5,6]], int)
b=np.array([[7,8],[9,10],[11,12]],int)
c=np.array([[1,0,0],[0,1,0],[0,0,1]], int)
d=np.array([[1,2],[3,2],[0,0]], int)

n=4
k=2
numA = (n-k)*k     #this calculates how many elements are in our A matrix
field=[0,1,2,3]    #we are working over F4
candidates=[]      #here, candidates is all possible codes in general form given some n and k
lcd=[]             #these are the kxn matrices that actually are lcd codes
notlcd=[]

mxG=leftIdentity(np.zeros((k,n)), k)

addAllA(field, numA) #this finds all possible G in our code; candidates now fill

for i in range(0, len(candidates)):  #this gives us all of our lcd codes for a given field f
    G = candidates[i]
    Gt = transpose(G)
    GGt= prod(G, Gt, field)
    if isInvert(GGt,field):
        lcd.append(G)
    else:                           #these are for if you want to check em by hand
        notlcd.append(G)

print(len(candidates))
print(len(lcd))

